apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: java-summarizer
  title: GenAI Content Summarization Service (v1.1)
  description: Spring Boot microservice template, preconfigured for LLM use cases with LangChain4j
  tags:
    - recommended
    - java
    - ai
    - llm
spec:
  owner: user:default/glroland
  type: service

  parameters:
    - title: Provide some simple information
      required:
        - component_id
        - owner
        - java_package_name
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          ui:field: EntityNamePicker
        java_package_name:
          title: Java Package Name
          type: string
          default: com.glroland.xxx
          description: Name for the java package. eg (io.backstage.blah)
        description:
          title: Description
          type: string
          description: Describe the Generative AI use case that this supports.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          default: glroland
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a GitHub location for the service
      required:
        - repo
      properties:
        repo:
          title: Repository Location
          type: object
          properties:
            host:
              title: Repo Host
              type: string
              description: Your SCM host
              default: github.com
              enum:
                - github.com
            owner:
              title: Repo Owner
              type: string
              description: Your SCM host organization/group
              default: glroland

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutTemplating:
          - .github/workflows/*
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          artifact_id: ${{ parameters.component_id }}
          java_package_name: ${{ parameters.java_package_name }}
          owner: ${{ parameters.owner }}
          destination: https://${{ parameters.repo.host }}/${{ parameters.repo.owner }}/${{ parameters.component_id }}
          http_port: 8080

    - id: publish
      name: Publish
      action: publish:github
      input:
        description: This is ${{ parameters.component_id }}.  ${{ parameters.description }}
        repoUrl: "${{ parameters.repo.host }}?owner=${{ parameters.repo.owner }}&repo=${{parameters.component_id}}"

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: GitHub Repository
        url: ${{ steps.publish.output.remoteUrl }}
        icon: github
      - title: Code in DevSpaces
        url: https://devspaces.apps.ocpprod.home.glroland.com/dashboard/#/load-factory?url=${{ steps.publish.output.remoteUrl }}
      - title: Developer Hub Catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
